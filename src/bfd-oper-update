module bfd-oper {
  namespace "urn:ietf:params:xml:ns:yang:bfd-oper";
  prefix "bfd-oper";
   
  import bfd-parameters {
    prefix "bfd-parms";
  }
  
  import ietf-interfaces {
    prefix "if";
  }

  import ietf-inet-types {
    prefix "inet";
  }

  organization "IETF BFD Working Group";

  contact 
    "WG Web:   <http://tools.ietf.org/wg/bfd>
      WG List:  TBD
      WG Chair: Jeff Haas
      WG Chair: Nobo Akiya
      Editor:   Vero + Reshad";

  description 
    "This module contains the YANG definition for BFD parameters as per 
     RFC5881";

  revision 2015-01-17 {
    description "Initial revision.";
  }

	typedef ifName {
		description "Interface name";
		type string;
	}
	typedef vrfName {
		description "VRF Name";
		type string;
	}	

  /*grouping bfd-oper-base {
    description "BFD grouping for base operational data";

    //container operational {
    //config false;
      leaf your-discriminator {
        type uint32;
      }
      leaf local-state {
        type bfd-parms:state;
      }
      leaf remote-state {
        type bfd-parms:state;
      }
      leaf local-diagnostic {
        type bfd-parms:diagnostic;
      }
      leaf remote-diagnostic {
        type bfd-parms:diagnostic;
      }
      leaf remote-multiplier {
        type bfd-parms:multiplier;
      }
      //}    
  }*/

		grouping bfdAllSession {
			description "BFD Session Configuration Information";

			leaf sesssion-type {
				type enumeration {
					enum SINGLE_HOP_IP {
						value "0";
						description "SINGLE_HOP_IP:";
					}
					enum MULTI_HOP_IP {
						value "1";
						description "MULTI_HOP_IP:";
					}
				}
			}
			leaf local-dscriminator {
				type bfd-parms:discriminator;
			}
			leaf remote-dscriminator {
				type bfd-parms:discriminator;
			}			
			leaf local-multiplier {
        type bfd-parms:multiplier;
			}
      leaf remote-multiplier {
        type bfd-parms:multiplier;
      }			
			leaf desired-min-tx-interval{
				type uint32;
			}
			leaf required-min-rx-interval {
				type uint32;
			}
			leaf required-min-rx-echo-interval {
				type uint32;
			}
			leaf linkType {
				description "Binding Link Type";
				type enumeration {
					enum IP {
						value "0";
					}
				}
			}
			leaf nextHop {
				description "IP or LDP LSP Next Hop Address";
				config "false";
				type inet:ip-address;
			}
			leaf outIfName {
				description "Out Interface Name";
				config "false";
				type ifName;
			}
			leaf vrfName {
				description "VRF Name";
				config "false";
				type vrfName;
			}
			leaf demandEnable {
				description "Demand Mode Enable";
				config "false";
				type boolean;
			}
			leaf tosExp {
				description "Exp of Packet";
				config "false";
				type uint32;
			}
			leaf shutdown {
				description "Admin Down";
				config "false";
				type boolean;
			}
			leaf description {
				description "Information of session";
				config "false";
				type string;
			}
			leaf encapType {
				description "Encapsulation Type";
				config "false";
				type string;
			}
			list SessRunning {
				description "BFD Session Running Information";
 				leaf local-state {
 				  type bfd-parms:state;
 				}
 				leaf remote-state {
 				  type bfd-parms:state;
 				} 
 				leaf local-diagnostic {
         	type bfd-parms:diagnostic;
 				}
 				leaf remote-diagnostic {
         	type bfd-parms:diagnostic;
 				}
				leaf detect-Mode {
					description "Detect Mode";
					config "false";
					type enumeration {
						enum ASYNC_WITH_ECHO {
							value "0";
							description "ASYNC_WITH_ECHO:";
						}
						enum ASYNC_WITHOUT_ECHO {
							value "1";
							description "ASYNC_WITHOUT_ECHO:";
						}
						enum DEMAND_WITH_ECHO {
							value "2";
							description "DEMAND_WITH_ECHO:";
						}
						enum DEMAND_WITHOUT_ECHO {
							value "3";
							description "DEMAND_WITHOUT_ECHO:";
						}
					}
				}
				leaf actual-tx-interval {
					description "Actual transmit interval";
					config "false";
					type string;
				}
				leaf actual-rx-interval {
					description "Actual receive interval";
					config "false";
					type string;
				}
				leaf actual-echo-rx-interval {
					description "Actual echo receive interval";
					config "false";
					type string;
				}
				leaf Multiplier {
					description "Actual detect multiplier";
					config "false";
					type string;
				}
				leaf detectTime {
					description "Detect Time";
					config "false";
					type string;
				}
				leaf ttl {
					description "TTL of session";
					config "false";
					type uint32 {
						range "1..255";
					}
				}
				leaf udpDstPort {
					description "UDP Destination Port";
					config "false";
					type uint32;
				}
			}

			list SessStat {
				
 				description "BFD Session Statistics";
 
 				leaf lastDownTime {
					description "Timestamp of last down";
					config "false";
					type uint64;
				}
				leaf timeFromDown {
					description "Duration of last down";
					config "false";
					type string;
				}
				leaf createTime {
					description "Timestamp of session created";
					config "false";
					type uint64;
				}
				leaf timeFromCreate {
					description "Duration of session created";
					config "false";
					type string;
				}
				leaf lastUpTime {
					description "Timestamp of last UP";
					config "false";
					type uint64;
				}
				leaf timeFromUp {
					description "Duration of last UP";
					config "false";
					type string;
				}
				leaf recvPkt {
					description "Recieved Packet Count";
					config "false";
					type uint64;
				}
				leaf sendPkt {
					description "Sent Packet Count";
					config "false";
					type uint64;
				}
				leaf downCount {
					description "Session Down Count";
					config "false";
					type uint32;
				}
				leaf recvBadPkt {
					description "Received Bad Pcket Count";
					config "false";
					type uint64;
				}
				leaf sendBadPkt {
					description "Sent Bad Packet Count";
					config "false";
					type uint64;
				}
				leaf shortBreakCount {
					description "Shortbreak Count";
					config "false";
					default "0";
					type uint32;
				}
			}
		}

	container bfdSessionStatistic {
		config "false";
		description "BFD Session Number";

		leaf ipSessNum {
			description "IP Session Number";
			config "false";
			type uint32;
		}
		leaf totalSessNum {
			description "Total Session Number";
			config "false";
			type uint32;
		}
		leaf SessUpNum {
			description "Session Up Number";
			config "false";
			type uint32;
		}
		leaf SessDownNum {
			description "Session Down Number";
			config "false";
			type uint32;
		}
		leaf usedDiscrNum {
			description "Used Session Discriminator Number";
			config "false";
			type uint32;
		}
	}

  container session-lists {
    config false;
    list session-sh-ip {

      key "interface destination-address";
      leaf interface {
	type if:interface-ref;
      }
      leaf destination-address {
	type inet:ip-address;
      }

      //uses bfd-oper-base;
      uses bfdAllSession;
    }

    list session-mh-ip {

      key "vrf-name source-address destination-address";
      leaf vrf-name {
	type string;
      }
      leaf source-address {
	type inet:ip-address;
      }
      leaf destination-address {
	type inet:ip-address;
      }

      //uses bfd-oper-base;
      uses bfdAllSession;
    }
  }
}
